# Secure ENV Manager

Uma ferramenta CLI para gerenciar arquivos .env de forma segura usando criptografia AES-GCM.

## Estratégia de Autenticação

A aplicação usa uma estratégia de autenticação simples, mas efetiva:

1. **Variáveis de Ambiente**: As credenciais iniciais são definidas através de variáveis de ambiente:
   - `SECURE_ENV_INITIAL_USER`: Nome de usuário para autenticação
   - `SECURE_ENV_INITIAL_PASS`: Senha para autenticação e criptografia

2. **Autenticação via Linha de Comando**: Os usuários devem fornecer credenciais ao executar o programa:
   ```bash
   make run USER=username PASS=password
   ```

3. **Processo de Validação**:
   - As credenciais são validadas contra as variáveis de ambiente
   - A senha também é usada como chave de criptografia para AES-GCM
   - Todos os membros da equipe devem usar as mesmas credenciais para garantir o compartilhamento de arquivos

4. **Medidas de Segurança**:
   - As credenciais nunca são armazenadas em texto puro
   - O arquivo de configuração é protegido contra modificações
   - Cada sessão requer reautenticação

### Por que Credenciais Pré-configuradas?

A decisão de usar credenciais pré-configuradas em vez de um sistema de registro de usuários foi tomada por várias razões:

1. **Sincronização da Equipe**: Como a ferramenta é projetada para uso em equipe, ter credenciais compartilhadas garante que todos os membros possam criptografar/descriptografar arquivos usando a mesma chave.
2. **Gerenciamento Simplificado de Chaves**: Usar um único conjunto de credenciais elimina a complexidade de gerenciar múltiplas chaves de criptografia e compartilhar arquivos entre usuários.
3. **Segurança por Processo**: O modelo de segurança depende da distribuição adequada de credenciais através de canais seguros da equipe, em vez de um sistema de registro de usuários potencialmente vulnerável.
4. **Superfície de Ataque Reduzida**: Ao não implementar registro e gerenciamento de usuários, eliminamos potenciais vulnerabilidades de segurança associadas a essas funcionalidades.

## Executando o Programa

1. Clone o repositório:
```bash
git clone [repo-url]
cd secure-env-manager
```

2. Execute o programa:
```bash
make run USER=username PASS=password
```

**Importante:** 
- Use as credenciais compartilhadas da equipe. Todos devem usar as mesmas credenciais para garantir que possam descriptografar os arquivos uns dos outros.
- O arquivo `config.json` é protegido contra alterações (somente leitura) para garantir a integridade das credenciais.
- Obtenha as credenciais com sua equipe antes de usar o programa.

## Como Usar

O programa oferece duas operações principais:

1. Criptografar arquivo .env:
```bash
make run USER=username PASS=password
# Escolha a opção 1
# Digite o nome do projeto (ex: meuprojeto)
# Digite o caminho para o arquivo .env a ser criptografado (ex: ~/dev/meuprojeto/.env)
```

2. Descriptografar arquivo:
```bash
make run USER=username PASS=password
# Escolha a opção 2
# Digite o nome do projeto
# Digite o caminho para o arquivo a ser atualizado (ex: ~/dev/meuprojeto/.env)
```

## Desinstalação

Para remover completamente o programa:
```bash
make uninstall
```

## Estrutura de Arquivos

```
secure-env-manager/
├── cmd/
│   └── secure-env/     # Ponto de entrada da aplicação
│       ├── main.go
│       └── main_test.go
├── internal/
│   ├── config/         # Configuração da aplicação
│   │   ├── config.go
│   │   └── config_test.go
│   ├── crypto/         # Funções de criptografia
│   │   ├── crypto.go
│   │   └── crypto_test.go
│   └── handler/        # Manipuladores de comandos
│       ├── handler.go
│       └── handler_test.go
├── test-output/        # Relatórios de cobertura de testes
├── .cache/            # Cache do Go (ignorado pelo Git)
├── Dockerfile         # Configuração do container
├── Makefile          # Comandos de automação
├── go.mod            # Dependências do Go
├── go.sum            # Checksums das dependências
└── README.md         # Este arquivo
```

## Segurança

- Credenciais compartilhadas pela equipe
- Criptografia AES-GCM para arquivos .env
- Senha também usada como chave de criptografia
- Arquivos descriptografados automaticamente ignorados pelo Git
- Arquivo de credenciais protegido contra alterações

## Comandos Make

```bash
make run USER=username PASS=password  # Executar o programa
make uninstall                       # Remover o programa
make help                           # Mostrar ajuda
```

## Requisitos

- Docker 

## Contribuindo

Adoramos contribuições da nossa comunidade! Se você quiser contribuir com o projeto:

1. Leia nosso [Guia de Contribuição](CONTRIBUTING.md.pt) para entender nosso processo de desenvolvimento
2. Aprenda sobre nosso padrão de commits semânticos que usamos para automatizar releases
3. Faça um fork do projeto e envie seu Pull Request!

Todas as contribuições são bem-vindas, desde correções na documentação até novas funcionalidades. 